generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Existing models for authentication
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    teamMemberships TeamMember[]
    ownedProjects Project[]  @relation("ProjectOwner")
}


// New models for task management
model Category {
  id        String    @id @default(cuid())
  name      String
  projects  Project[] @relation("ProjectCategories")
}


model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  categories  Category[] @relation("ProjectCategories") // Relation field to categories
  tasks       Task[]
  teamMembers TeamMember[]
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  User        User[]
}


model Task {
    id          String   @id @default(cuid())
    title       String
    description String?
    priority    Priority
    deadline    DateTime
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TeamMember {
    id        String  @id @default(cuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    projectId String
    project   Project @relation(fields: [projectId], references: [id])
    role      Role

    @@unique([userId, projectId])
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum Role {
    VIEWER
    EDITOR
    ADMIN
}