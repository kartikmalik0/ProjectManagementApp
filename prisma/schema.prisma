generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Existing models for authentication
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    teamMemberships TeamMember[]
    ownedProjects Project[]  @relation("ProjectOwner")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// New models for task management
model Category {
    id       String    @id @default(cuid())
    name     String
    projects Project[]
}

model Project {
    id          String   @id @default(cuid())
    name        String
    description String?
    categoryId  String
    category    Category @relation(fields: [categoryId], references: [id])
    tasks       Task[]
    teamMembers TeamMember[]
    ownerId     String
    owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])

    User User[]
}

model Task {
    id          String   @id @default(cuid())
    title       String
    description String?
    priority    Priority
    deadline    DateTime
    projectId   String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model TeamMember {
    id        String  @id @default(cuid())
    userId    String
    user      User    @relation(fields: [userId], references: [id])
    projectId String
    project   Project @relation(fields: [projectId], references: [id])
    role      Role

    @@unique([userId, projectId])
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum Role {
    VIEWER
    EDITOR
    ADMIN
}